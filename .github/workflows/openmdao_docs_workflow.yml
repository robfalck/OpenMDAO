name: OpenMDAO Docs

on:
  # Trigger on push or pull request events for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Trigger on release, to publish release versioned docs to openmdao.org
  release:
    types: [published]

  # Trigger via workflow_dispatch event
  workflow_dispatch:


run-name:  ${{ inputs.run_name }}

permissions: {}

jobs:

  tests:

    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        include:

          # build docs (baseline versions)
          - NAME: Build Docs
            OS: ubuntu-24.04
            PY: '3.12'
            NUMPY: '2.2'
            SCIPY: '1.16'
            PETSc: '3.21'
            PYOPTSPARSE_FROM: 'conda-forge'
            PYOPTSPARSE: '2.13.1'
            SNOPT: '7.7'
            OPTIONAL: '[all]'
            PUBLISH: true

    runs-on: ${{ matrix.OS }}

    name: ${{ matrix.NAME }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Display run details
        run: |
          echo "============================================================="
          echo "Run #${GITHUB_RUN_NUMBER}"
          echo "Run ID: ${GITHUB_RUN_ID}"
          echo "Testing: ${GITHUB_REPOSITORY}"
          echo "Triggered by: ${GITHUB_EVENT_NAME}"
          echo "Initiated by: ${GITHUB_ACTOR}"
          echo "============================================================="

      - name: Create SSH key
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{secrets.SSH_KNOWN_HOSTS}}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.PY }}
          conda-remove-defaults: true
          channels: conda-forge

      - name: Install OpenMDAO
        run: |
          conda install numpy=${{ matrix.NUMPY }} scipy=${{ matrix.SCIPY }} -q -y

          python -m pip install --upgrade pip

          echo "============================================================="
          echo "Install OpenMDAO"
          echo "============================================================="
          python -m pip install .${{ matrix.OPTIONAL }}

      - name: Install PETSc
        if: matrix.PETSc
        run: |
          echo "============================================================="
          echo "Install compilers for PETSc"
          COMPILERS="cython compilers openmpi-mpicc"
          conda install $COMPILERS -q -y

          echo "============================================================="
          echo "Install PETSc"
          echo "============================================================="
          conda install mpi4py petsc4py=${{ matrix.PETSc }} -q -y

          echo "============================================================="
          echo "Check MPI and PETSc installation"
          echo "============================================================="
          export PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe
          export OMPI_MCA_rmaps_base_oversubscribe=1
          export OMPI_MCA_btl=^openib
          echo "-----------------------"
          echo "Quick test of mpi4py:"
          mpirun -n 3 python -c "from mpi4py import MPI; print(f'Rank: {MPI.COMM_WORLD.rank}')"
          echo "-----------------------"
          echo "Quick test of petsc4py:"
          mpirun -n 3 python -c "import numpy; from mpi4py import MPI; comm = MPI.COMM_WORLD; \
                                 import petsc4py; petsc4py.init(); \
                                 x = petsc4py.PETSc.Vec().createWithArray(numpy.ones(5)*comm.rank, comm=comm);  \
                                 print(x.getArray())"
          echo "-----------------------"

          echo "export PRTE_MCA_rmaps_default_mapping_policy=:oversubscribe" >> $GITHUB_ENV
          echo "OMPI_MCA_rmaps_base_oversubscribe=1" >> $GITHUB_ENV
          echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV

          echo "Workaround for intermittent failures with OMPI https://github.com/open-mpi/ompi/issues/7393"
          echo "TMPDIR=/tmp" >> $GITHUB_ENV

      - name: Install pyOptSparse from GitHub
        if: matrix.PYOPTSPARSE && matrix.PYOPTSPARSE_FROM == 'github'
        run: |
          echo "Installing pyOptSparse from GitHub, IPOPT will not be available"
          pip install git+https://github.com/mdolab/pyoptsparse@v${{ matrix.PYOPTSPARSE }}

      - name: Install pyOptSparse from conda-forge
        if: matrix.PYOPTSPARSE && matrix.PYOPTSPARSE_FROM == 'conda-forge'
        run: |
          echo "Installing pyOptSparse from conda-forge, IPOPT will be available"
          conda install -c conda-forge pyoptsparse=${{ matrix.PYOPTSPARSE }} -q -y

      - name: Install pyOptSparse using build_pyoptsparse
        if: matrix.PYOPTSPARSE && matrix.PYOPTSPARSE_FROM == 'build_pyoptsparse'
        continue-on-error: false
        run: |
          conda install -c conda-forge swig -q -y

          python -m pip install git+https://github.com/OpenMDAO/build_pyoptsparse

          if [[ "${{ matrix.PYOPTSPARSE }}" == "latest" ]]; then
            function latest_version() {
              local REPO_URL=$1/releases/latest
              local LATEST_URL=`curl -fsSLI -o /dev/null -w %{url_effective} $REPO_URL`
              local LATEST_VER=`echo $LATEST_URL | awk '{split($0,a,"/tag/"); print a[2]}'`
              echo $LATEST_VER
            }
            BRANCH="-b $(latest_version https://github.com/mdolab/pyoptsparse)"
          else
            BRANCH="-b v${{ matrix.PYOPTSPARSE }}"
          fi

          if [[ "${{ matrix.PAROPT }}" ]]; then
            PAROPT="-a"
          fi

          if [[ "${{ matrix.SNOPT }}" == "7.7" && "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
            echo "  > Secure copying SNOPT 7.7 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_77 }} SNOPT
            SNOPT="-s SNOPT/src"
          elif [[ "${{ matrix.SNOPT }}" == "7.2" && "${{ secrets.SNOPT_LOCATION_72 }}" ]]; then
            echo "  > Secure copying SNOPT 7.2 over SSH"
            mkdir SNOPT
            scp -qr ${{ secrets.SNOPT_LOCATION_72 }} SNOPT
            ls -lR SNOPT
            SNOPT="-s SNOPT/source"
          elif [[ "${{ matrix.SNOPT }}" ]]; then
            echo "SNOPT version ${{ matrix.SNOPT }} was requested but source is not available"
          fi

          build_pyoptsparse -v $BRANCH $PAROPT $SNOPT

      - name: Display environment info
        id: env_info
        continue-on-error: true
        run: |
          conda info
          conda list

          echo "============================================================="
          echo "Check installed versions of Python, Numpy and Scipy"
          echo "============================================================="
          echo 'errors<<EOF' >> $GITHUB_OUTPUT

          FINAL_VER=`python -c "import platform; print(platform.python_version())"`
          if [[ ! "$FINAL_VER" == "${{ matrix.PY }}"* ]]; then
            echo "Python version was changed from ${{ matrix.PY }} to $FINAL_VER" >> $GITHUB_OUTPUT
          fi

          FINAL_VER=`python -c "import numpy; print(numpy.__version__)"`
          if [[ ! "$FINAL_VER" == "${{ matrix.NUMPY }}"* ]]; then
            echo "NumPy version was changed from ${{ matrix.NUMPY }} to $FINAL_VER" >> $GITHUB_OUTPUT
          fi

          FINAL_VER=`python -c "import scipy; print(scipy.__version__)"`
          if [[ ! "$FINAL_VER" == "${{ matrix.SCIPY }}"* ]]; then
            echo "SciPy version was changed from ${{ matrix.SCIPY }} to $FINAL_VER" >> $GITHUB_OUTPUT
          fi

          echo 'EOF' >> $GITHUB_OUTPUT

          grep changed $GITHUB_OUTPUT || echo ""

      - name: Build docs
        id: build_docs
        run: |
          export OPENMDAO_REPORTS=0
          export PYDEVD_DISABLE_FILE_VALIDATION=1

          cd openmdao/docs

          if [[ "${{ secrets.SNOPT_LOCATION_72 }}" || "${{ secrets.SNOPT_LOCATION_77 }}" ]]; then
            echo "============================================================="
            echo "Building docs with SNOPT examples."
            echo "============================================================="
          else
            echo "============================================================="
            echo "Disabling SNOPT cells in notebooks."
            echo "============================================================="
            python openmdao_book/other/disable_snopt_cells.py
          fi

          # start ipcluster
          python -u ./start_mpi_cluster.py -n 4 &
          exit 1

          # # wait for the cluster to be ready before executing notebooks
          # python -c "import ipyparallel as ipp; cluster=ipp.Client(cluster_id='docs-mpi-cluster'); cluster.wait_for_engines(n=4, timeout=60); print('Cluster Ready')"

          # pip install papermill
          # papermill openmdao_book/features/core_features/working_with_derivatives/parallel_derivs.ipynb executed_notebook.ipynb

          # echo "============================================================="
          # echo "Build the docs"
          # echo "============================================================="
          # python build_source_docs.py
          # jupyter-book build -W --keep-going openmdao_book
          # python copy_build_artifacts.py
          # ipcluster stop --cluster-id=docs-mpi-cluster
          exit 1
        continue-on-error: true

      - name: Display doc build reports
        if: steps.build_docs.outcome == 'failure'
        run: |
          for f in $(find /home/runner/work/OpenMDAO/OpenMDAO/openmdao/docs/openmdao_book/_build/html/reports -name '*.log'); do
            echo "============================================================="
            echo $f
            echo "============================================================="
            cat $f
          done
          exit 1

      - name: Archive built docs
        if: steps.build_docs.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: built-docs-artifact
          path: openmdao/docs/openmdao_book/_build/html
          retention-days: 1

      - name: Publish docs
        if: github.event_name != 'pull_request' && matrix.PUBLISH
        env:
          DOCS_LOCATION: ${{ secrets.DOCS_LOCATION }}
        run: |
          if [[ "${#DOCS_LOCATION}" ]]; then
            echo "============================================================="
            echo "Create env with openssl compatible with hosting service"
            echo "============================================================="
            conda create -n upload python=3.11 packaging openssl=3
            conda activate upload

            echo "============================================================="
            echo "Publish docs"
            echo "============================================================="
            cd openmdao/docs
            python upload_doc_version.py openmdao_book/_build/html/ ${{ secrets.DOCS_LOCATION }}
          else
            echo "Docs destination not available."
          fi

      - name: Slack env change
        if: steps.env_info.outputs.errors != ''
        uses: act10ns/slack@v2.0.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'warning'
          message: |
            Environment change detected on `${{ matrix.NAME }}` build.
            Python, NumPy or SciPy was not the requested version:
            ```${{steps.env_info.outputs.errors}}```
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Slack doc build failure
        if: steps.build_docs.outcome == 'failure'
        uses: act10ns/slack@v2.0.0
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: ${{ steps.build_docs.outcome }}
          message: |
            Doc build failed on `${{ matrix.NAME }}` build.
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Fail the workflow if doc build failed
        if: steps.build_docs.outcome == 'failure'
        uses: actions/github-script@v3
        with:
          script: |
              let docs_fail = ${{ steps.build_docs.outcome == 'failure' }};
              if (docs_fail) {
                  core.setFailed('Doc build failed.');
              }
